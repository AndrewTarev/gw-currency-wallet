// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gw-currency-wallet/internal/storage/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	decimal "github.com/shopspring/decimal"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(c context.Context, userInput *models.UserLogin) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c, userInput)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(c, userInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), c, userInput)
}

// Register mocks base method.
func (m *MockAuthService) Register(c context.Context, input models.UserRegister) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(c, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), c, input)
}

// MockExchangeService is a mock of ExchangeService interface.
type MockExchangeService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceMockRecorder
}

// MockExchangeServiceMockRecorder is the mock recorder for MockExchangeService.
type MockExchangeServiceMockRecorder struct {
	mock *MockExchangeService
}

// NewMockExchangeService creates a new mock instance.
func NewMockExchangeService(ctrl *gomock.Controller) *MockExchangeService {
	mock := &MockExchangeService{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeService) EXPECT() *MockExchangeServiceMockRecorder {
	return m.recorder
}

// ExchangeCurrency mocks base method.
func (m *MockExchangeService) ExchangeCurrency(c context.Context, userID uuid.UUID, fromCurrency, toCurrency string, amount, exchangedAmount decimal.Decimal) (models.WalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCurrency", c, userID, fromCurrency, toCurrency, amount, exchangedAmount)
	ret0, _ := ret[0].(models.WalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCurrency indicates an expected call of ExchangeCurrency.
func (mr *MockExchangeServiceMockRecorder) ExchangeCurrency(c, userID, fromCurrency, toCurrency, amount, exchangedAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCurrency", reflect.TypeOf((*MockExchangeService)(nil).ExchangeCurrency), c, userID, fromCurrency, toCurrency, amount, exchangedAmount)
}

// GetRate mocks base method.
func (m *MockExchangeService) GetRate(c context.Context, fromCurrency, toCurrency string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", c, fromCurrency, toCurrency)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockExchangeServiceMockRecorder) GetRate(c, fromCurrency, toCurrency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockExchangeService)(nil).GetRate), c, fromCurrency, toCurrency)
}

// GetRates mocks base method.
func (m *MockExchangeService) GetRates(c context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRates", c)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRates indicates an expected call of GetRates.
func (mr *MockExchangeServiceMockRecorder) GetRates(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRates", reflect.TypeOf((*MockExchangeService)(nil).GetRates), c)
}

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockWalletService) Deposit(c context.Context, userID uuid.UUID, currency string, amount decimal.Decimal) (models.WalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", c, userID, currency, amount)
	ret0, _ := ret[0].(models.WalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockWalletServiceMockRecorder) Deposit(c, userID, currency, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockWalletService)(nil).Deposit), c, userID, currency, amount)
}

// GetBalance mocks base method.
func (m *MockWalletService) GetBalance(c context.Context, userID uuid.UUID) (models.WalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", c, userID)
	ret0, _ := ret[0].(models.WalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletServiceMockRecorder) GetBalance(c, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletService)(nil).GetBalance), c, userID)
}

// Withdraw mocks base method.
func (m *MockWalletService) Withdraw(c context.Context, userID uuid.UUID, currency string, amount decimal.Decimal) (models.WalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", c, userID, currency, amount)
	ret0, _ := ret[0].(models.WalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWalletServiceMockRecorder) Withdraw(c, userID, currency, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWalletService)(nil).Withdraw), c, userID, currency, amount)
}
